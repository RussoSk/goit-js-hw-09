{"mappings":"AAAaA,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,G,kBAiBlB,IAAMC,EAAWC,EAAI,EACfC,EAAeC,EAAQF,EAAIG,GAWrC,SAAuBJ,EAAUG,GAC/B,OAAO,IAAIE,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,GACFI,QAAQC,IAAI,uBAAwCC,OAAfd,EAAS,QAAYc,OAANX,EAAM,OACxDG,EAAM,CAAEN,WAAUG,YAEpBS,QAAQC,IAAI,sBAAqCC,OAAfd,EAAS,QAAYc,OAANX,EAAM,OACvDI,EAAO,CAAEP,WAAUG,U,GAEpBA,E,KAtBHY,CAAcf,EAAUE,GACrBc,MAAK,WACJJ,QAAQC,IAAI,WAAsCC,OAA3Bd,EAAS,oBAA+Bc,OAAbZ,EAAa,M,IAEhEe,OAAM,WACLL,QAAQC,IAAI,WAAsCC,OAA3Bd,EAAS,oBAA+Bc,OAAbZ,EAAa,M,KAvBrEH,EAAMmB,iBAEN,IAAMC,EAAavB,SAASC,cAAc,uBACpCuB,EAAYxB,SAASC,cAAc,sBACnCwB,EAAczB,SAASC,cAAc,wBAErCM,EAAQmB,SAASH,EAAWI,OAC5BnB,EAAOkB,SAASF,EAAUG,OAC1BC,EAASF,SAASD,EAAYE,OAEpC,GAAIE,MAAMtB,IAAUsB,MAAMrB,IAASqB,MAAMD,GACvCE,MAAM,8CAIR,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAQG,IAAGC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('.form');\n\nform.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  if (isNaN(delay) || isNaN(step) || isNaN(amount)) {\n    alert('Please enter valid interval \"numbers\"');\n    return;\n  }\n\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const currentDelay = delay + i * step;\n    createPromise(position, currentDelay)\n      .then(() => {\n        console.log(`Promise ${position} resolved after ${currentDelay}ms`);\n      })\n      .catch(() => {\n        console.log(`Promise ${position} rejected after ${currentDelay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        resolve({ position, delay });\n      } else {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n"],"names":["document","querySelector","addEventListener","event","position","i","currentDelay","delay","step","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","concat","$ce04d3a99e08e73b$var$createPromise","then","catch","preventDefault","delayInput","stepInput","amountInput","parseInt","value","amount","isNaN","alert","i1","_loop"],"version":3,"file":"03-promises.e0ef066f.js.map"}